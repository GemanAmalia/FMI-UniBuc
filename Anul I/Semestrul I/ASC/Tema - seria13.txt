.data
	a: .space 1600 					# matricea de adicenta
	roles: .space 1600			
	viz: .space 1600				
	coada: .space 1600			
	sir: .space 200

	sp: .asciiz " "
	nl: .asciiz "\n"
	dp: .asciiz ":"
	pv: .asciiz ";"

	switch: .asciiz "switch malitios index "
	controller: .asciiz "controller index "
	host: .asciiz "host index "
	switch1: .asciiz "switch index "

	stryes: .asciiz "Yes"
	strno: .asciiz "No"
	
.text

main:
	li $v0, 5					# READ INT n (nr noduri)
	syscall
	move $t0, $v0					# acum $t0 este "n"-ul curent
	
	li $v0, 5					# READ INT m (nr de legaturi)
	syscall 
	move $t1, $v0					# acum $t1 este "m"-ul curent
	
	li $t2, 0					# pt crearea matricii
	li $s1, 1

for_create_matrix:

	bge $t2, $t1, main_roles	
	
	li $v0, 5					# "x"
	syscall
	move $t3, $v0
	
	li $v0, 5					# "y"
	syscall
	move $t4, $v0
	
	mul $t5, $t3, $t0				# $t5 = lineIndex * columns
	add $t5, $t5, $t4				# $t5 = $t5 + columnIndex
	mul $t5, $t5, 4					# $t5 = $t5 * 4
	sw $s1, a($t5)					# a[x][y] = 1
	
	mul $t5, $t4, $t0				# $t5 = lineIndex * columns
	add $t5, $t5, $t3				# $t5 = $t5 + columnIndex
	mul $t5, $t5, 4					# $t5 = $t5 * 4
	sw $s1, a($t5)					# a[y][x] = 1
	
	addi $t2, $t2, 1
	j for_create_matrix	


main_roles:

	li $t2, 0					# pe post de "i"
	li $t3, 0					# sare locatii de memorie

for_create_roles:
	
	bge $t2, $t0, main_cerinta
	
	li $v0, 5					# READ INT
	syscall
	
	sw $v0, roles($t3)				# roles($t3) = $v0
	
	addi $t2, $t2, 1
	addi $t3, $t3, 4
	j for_create_roles

main_cerinta:
	
	li $v0, 5
	syscall
	move $s0, $v0

	beq $s0, 1, main_cer_1
	beq $s0, 2, main_cer_2
	beq $s0, 3, main_cer_3



#CERINTA 1

main_cer_1:
	li $t1, 0				# t1 = k
	li $t2, 0				# pt salt in memorie din 4 in 4 

for:						# for(k=0; k<n; k++)
	bge $t1, $t0, exit
	lw $t4, roles($t2)			# t4 = roles[t2]
	beq $t4, 3, afisare			# if(roles(k) == 3)
	j cont_for

cont_for:
	addi $t1, $t1, 1
	addi $t2, $t2, 4
	j for

afisare:
	
	la $a0, switch				# afisez "switch malitios index "
	li $v0, 4
	syscall
	move $a0, $t1				# afisez indicele switch-ului malitios
	li $v0, 1
	syscall 
	la $a0, dp				# afisez doua puncte
	li $v0, 4
	syscall
	la $a0, sp				# afisez spatiu
	li $v0, 4
	syscall 
	
	li $t6, 0				# indicele pt coloana
	li $s1, 0				# pt salt de memorie din 4 in 4

for_columns:					# for(j=0; j<n; j++)a[k][j]
	
	bge $t6, $t0, printnl   		# daca am parcurs toata coloana
	mul $t7, $t1, $t0			# $t7 = lineIndex * columns
	add $t7, $t7, $t6			# $t7 = $t7 + columnIndex
	mul $t7, $t7, 4				# $t7 = $t7 * 4
	
	lw $t5, a($t7)				# t5  = s[t7]; t5 - valoarea din matrice

	beq $t5, 1, afisare2
	j cont_for_columns

cont_for_columns:
	
	addi $t6, $t6, 1
	addi $s1, $s1, 4
	j for_columns	

afisare2: 					# trb sa afisez coloana
	
	
	lw $t3, roles($s1)			# t3 = roles de indicele coloanei

	# host
	beq $t3, 1, ah 
	
	# switch
	beq $t3, 2, as
	
	# switch malitios
	beq $t3, 3, asm
	
	# controller
	beq $t3, 4, ac	
ah:
	la $a0, host				# afisez "host index "
	li $v0, 4
	syscall
	move $a0, $t6				# afisez indicele coloanei
	li $v0, 1
	syscall
	la $a0, pv				# afisez ";"
	li $v0, 4
	syscall
	la $a0, sp
	li $v0, 4
	syscall
	j cont_for_columns
as:
	la $a0, switch1				# afisez "switch index "
	li $v0, 4
	syscall
	move $a0, $t6				# afisez indicele coloanei
	li $v0, 1
	syscall
	la $a0, pv				# afisez ";"
	li $v0, 4
	syscall
	la $a0, sp
	li $v0, 4
	syscall
	j cont_for_columns
asm:
	la $a0, switch				# afisez "switch malitios index "
	li $v0, 4
	syscall
	move $a0, $t6				# afisez indicele coloanei
	li $v0, 1
	syscall
	la $a0, pv				# afisez ";"
	li $v0, 4
	syscall
	la $a0, sp
	li $v0, 4
	syscall
	j cont_for_columns
ac:
	la $a0, controller			# afisez "controller index "
	li $v0, 4
	syscall
	move $a0, $t6				# afisez indicele coloanei
	li $v0, 1
	syscall
	la $a0, pv				# afisez ";"
	li $v0, 4
	syscall
	la $a0, sp
	li $v0, 4
	syscall
	j cont_for_columns

printnl:
	la $a0, nl
	li $v0, 4		
	syscall
	j cont_for



# CERINTA 2

main_cer_2:

	li $t1, 0 					# t1 - lungimea cozii - ul
	li $t2, 0					# t2 - indexul cozii - pr
	li $t3, 0					# t3 - sare locatii de memorie in coada pt pr
	li $s2, 0					# s2 - sare locatii de memorie in coada pt ul
	li $s1, 1
	li $s4, 4
	
	# adaug primul element in coada pe poz 0
	sw $t1, coada($t3)				# coada($t3) = 0

	# marchez nodul 0 ca vizitat
	sw $s1, viz($t3)				# viz[0] = 1


for_while:
	bgt $t2, $t1, part2				# un fel de (pr<=ul)
	
	lw $t4, coada($t3)				# $t4-nod curent; t4 = coada(t3)
			
	addi $t2, $t2, 1				# pr++
	addi $t3, $t3, 4	
	
	li $t5, 1
	
	# vf daca nodul curent este host 
	mul $s5, $t4, $s4
	lw $s6, roles($s5)
	
	beq $s6, 1, ahnod

	#trb sa parcurg toate nodurile de la 0 la n
	for_noduri:
		bge $t5, $t0, for_while
			
		# a[v][i]
		mul $t6, $t4, $t0			# $t6 = lineIndex * columns
		add $t6, $t6, $t5			# $t6 = $t6 + columnIndex
		mul $t6, $t6, 4				# $t6 = $t6 * 4
		
		lw $t7, a($t6)				# t7 = a[t6]
		
		beq $t7, 1, if2				# if(a[v][i]==1)
		j cont_for_noduri
		
		if2:					# if(viz[i]==0)
			mul $s5, $s4, $t5
			lw $s6, viz($s5)
			beq $s6, 0, afis
			j cont_for_noduri
	
		afis:	
			sw $s1, viz($s5)		# viz(s5) = 1	
			addi $t1, $t1, 1		# ul++; 
			addi $s2, $s2, 4	
			sw $t5, coada($s2)		# coada(s2) = t5
			
			j cont_for_noduri

	cont_for_noduri:
	
		addi $t5, $t5, 1
		j for_noduri			
			
ahnod:
	la $a0, host					# afisez "host index "
	li $v0, 4
	syscall
	move $a0, $t4					# afisez indicele hostului
	li $v0, 1
	syscall
	la $a0, pv					# afisez ";"
	li $v0, 4
	syscall
	la $a0, sp					# afisez spatiu
	li $v0, 4
	syscall

	j for_noduri
	

part2:
	li $t1, 0					# i pt nodurile din viz
	li $t2, 0					# salt de memorie pt nodurile din viz
	li $t4, 0 					# ct

for_part2:
	bge $t1, $t0, afis_part2	
	
	lw $t3, viz($t2)
	beq $t3, 1, contor	
	
cont_for_part2:
	addi $t1, $t1, 1
	addi $t2, $t2, 4
	j for_part2
	
contor:
	addi $t4, $t4, 1	
	j cont_for_part2

afis_part2:
	beq $t4, $t0, yes1
	j no1

yes1:
	la $a0, nl
	li $v0, 4		
	syscall
		
	la $a0, stryes					# afisez "Yes"		
	li $v0, 4
	syscall
	
	j exit

no1:
	la $a0, nl
	li $v0, 4		
	syscall
		
	la $a0, strno					# afisez "No"
	li $v0, 4
	syscall

	j exit


# CERINTA 3
main_cer_3:

	li $t1, 0 				# t1 - lungimea cozii - ul
	li $t2, 0				# t2 - indexul cozii - pr
	li $t3, 0				# t3 - sare locatii de memorie in coada pt pr
	li $s2, 0				# s2 - sare locatii de memorie in coada pt ul
	li $s1, 1
	li $s4, 4

	li $v0, 5				# "x"
	syscall
	move $s0, $v0
	
	li $v0, 5				# "y"
	syscall
	move $s3, $v0

	li $v0, 8				# citire sir
	la $a0, sir
	li $a1, 20
	syscall
	
	# adaug primul element in coada pe poz 0
	sw $s0, coada($t3)				# coada($t3) = s0

	# marchez nodul s0 ca vizitat
	mul $s5, $s0, $s4 
	sw $s1, viz($s5)				# viz[s0] = 1


for_while3:
	bgt $t2, $t1, afis3				# un fel de (pr<=ul)
	
	lw $t4, coada($t3)				# $t4-nod curent; 
			
	addi $t2, $t2, 1				# pr++
	addi $t3, $t3, 4	
	
	li $t5, 1

	# trb sa parcurg toate nodurile de la 0 la n
	for3:
		bge $t5, $t0, for_while3
		
		# roles[i]
		mul $s5, $t5, $s4
		lw $s6, roles($s5)
		bne $s6, 3, pas2
		j cont_for3
			 
		pas2:					# if(a[v][i]==1)
			# a[v][i]
			mul $t6, $t4, $t0		# $t6 = lineIndex * columns
			add $t6, $t6, $t5		# $t6 = $t6 + columnIndex
			mul $t6, $t6, 4			# $t6 = $t6 * 4
			lw $t7, a($t6)			# t7 = a[t6]
		
			beq $t7, 1, pas3		
			j cont_for3
			
		pas3:					# if(viz[i]==0)
			mul $s5, $t5, $s4
			lw $s6, viz($s5)
			beq $s6, 0, pas4
			j cont_for3
	
		pas4:	
			mul $s5, $t5, $s4
			sw $s1, viz($s5)		# viz(s5) = 1	
			addi $t1, $t1, 1		# ul++; 
			addi $s2, $s2, 4	
			sw $t5, coada($s2)		# coada(s2) = t5
			j cont_for3

	cont_for3:
	
		addi $t5, $t5, 1
		j for3		
		
afis3:
	# if(viz[x] == 1)
	mul $s5, $s0, $s4
	lw $t1, viz($s5)

	# if(viz[y] == 1)
	mul $s5, $s3, $s4
	lw $t2, viz($s5)

	beq $t1, $t2, test2
	j criptat
test2:
	beq $t1, 1, necriptat
	j criptat

necriptat:
	la $a0, sir
	li $v0, 4
	syscall
	j exit

criptat:

	li $t2, 0					# index in cuvant
	li $t4, 16
	li $t5, 26
	li $t7, 97

for_cuvant:
	lb $t3, sir($t2)
	
	beq $t3, $0, afisarecriptat
	
	move $t6, $t3

	add $t6, $t6, $t4
	sub $t6, $t6, $t7
	rem $t6, $t6, $t5
	add $t6, $t6, $t7

	sb $t6, sir($t2)
	
	addi $t2, $t2, 1
	j for_cuvant

afisarecriptat:

	la $a0, sir
	li $v0, 4
	syscall	

exit:
	li $v0, 10
	syscall	
