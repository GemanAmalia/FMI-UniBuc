CREATE TABLE EMPLOYEES
(
  EMPLOYEEID        NUMBER                      NOT NULL,
  EMPLOYEELAST      VARCHAR2(20)                NOT NULL,
  EMPLOYEEFIRST     VARCHAR2(20)                NOT NULL,
  EMPLOYEEROLECODE  NUMBER                      NOT NULL,
  DOB               DATE,
  SALARY            NUMBER
);

ALTER TABLE EMPLOYEES ADD (
  PRIMARY KEY
 (EMPLOYEEID));


CREATE TABLE EMPLOYEE_ROLE
(
  EMPLOYEEROLECODE  NUMBER                      NOT NULL,
  ROLE_DESCRIPTION  VARCHAR2(25)                NOT NULL
);

ALTER TABLE EMPLOYEE_ROLE ADD (
  CONSTRAINT EMPLOYEEROLECODE_PK
 PRIMARY KEY
 (EMPLOYEEROLECODE));

ALTER TABLE EMPLOYEES ADD (
  CONSTRAINT EMPLOYEEROLECODE_FK 
 FOREIGN KEY (EMPLOYEEROLECODE) 
 REFERENCES EMPLOYEE_ROLE (EMPLOYEEROLECODE));


CREATE TABLE ORDERS
(
  ORDERID           NUMBER                      NOT NULL,
  EMPLOYEEID        NUMBER                      NOT NULL,
  CLIENTID          NUMBER                      NOT NULL,
  PAYMENTID         NUMBER                      NOT NULL,
  TABLEID           NUMBER                      NOT NULL,
  ORDER_DATE_TIME   DATE                        NOT NULL
);

ALTER TABLE ORDERS ADD (
  PRIMARY KEY
 (ORDERID));


CREATE TABLE MENUITEMS
(
  MENUITEMID         NUMBER                     NOT NULL,
  ITEM_DESCRIPTION   VARCHAR2(30)               NOT NULL,
  PRICE              NUMBER                     NOT NULL,
  MENUID             NUMBER                     NOT NULL
);

ALTER TABLE MENUITEMS ADD (
  PRIMARY KEY
 (MENUITEMID));


CREATE TABLE INGREDIENTS
(
  INGREDIENTID  NUMBER                          NOT NULL,
  QUANTITY      NUMBER                          NOT NULL,
  NAME          VARCHAR2(25)                    NOT NULL,
  FURNISORID    NUMBER                          NOT NULL
);

ALTER TABLE INGREDIENTS ADD (
  PRIMARY KEY
 (INGREDIENTID));


CREATE TABLE FURNISORS
(
  FURNISORID     NUMBER                         NOT NULL,
  NAME_FURNISOR  VARCHAR2(35)                   NOT NULL,
  PHONE          NUMBER                         NOT NULL,
  ADDRESS        VARCHAR2(35)    
);

ALTER TABLE FURNISORS ADD (
  PRIMARY KEY
 (FURNISORID));


CREATE TABLE MENUS
(
  MENUID           NUMBER                       NOT NULL,
  MENU_NAME        VARCHAR2(20)                 NOT NULL,
  NUMBER_OF_PAGES  NUMBER                       NOT NULL
);

ALTER TABLE MENUS ADD (
  PRIMARY KEY
 (MENUID));


CREATE TABLE PAYMENT
(
  PAYMENTID    NUMBER                           NOT NULL,
  PAYMENTTYPE  VARCHAR2(20)                     NOT NULL,
  SUMPAYMENT   NUMBER                           NOT NULL
);

ALTER TABLE PAYMENT ADD (
  PRIMARY KEY
 (PAYMENTID));


CREATE TABLE TABLES1
(
  TABLEID      NUMBER                           NOT NULL,
  TABLE_SEATS  NUMBER
);

ALTER TABLE TABLES1 ADD (
  PRIMARY KEY
 (TABLEID));


CREATE TABLE CLIENTS
(
  CLIENTID         NUMBER                       NOT NULL,
  CLIENTFIRSTNAME  VARCHAR2(20)                 NOT NULL,
  CLIENTLASTNAME   VARCHAR2(20)                 NOT NULL,
  PHONE            NUMBER,
  EMAIL            VARCHAR2(35)
);

ALTER TABLE CLIENTS ADD (
  PRIMARY KEY
 (CLIENTID));


CREATE TABLE BOOKING
(
  BOOKINGID     NUMBER                          NOT NULL,
  CLIENTID      NUMBER                          NOT NULL,
  DATE_B        DATE                            NOT NULL
); 

ALTER TABLE BOOKING ADD (
  PRIMARY KEY
 (BOOKINGID));


CREATE TABLE INCLUDE1
(
  MENUITEMID    NUMBER                        NOT NULL,
  ORDERID       NUMBER                        NOT NULL,
  constraint PKI primary key (MENUITEMID, ORDERID)
);

CREATE TABLE CONTAIN
(
  MENUITEMID    NUMBER                        NOT NULL,
  INGREDIENTID  NUMBER                        NOT NULL,
  constraint PKC primary key (MENUITEMID, INGREDIENTID)
);


ALTER TABLE ORDERS ADD (
  FOREIGN KEY (EMPLOYEEID) 
 REFERENCES EMPLOYEES (EMPLOYEEID));

ALTER TABLE ORDERS ADD (
  FOREIGN KEY (CLIENTID) 
 REFERENCES CLIENTS (CLIENTID));

ALTER TABLE ORDERS ADD (
  FOREIGN KEY (PAYMENTID) 
 REFERENCES PAYMENT (PAYMENTID));

ALTER TABLE ORDERS ADD (
  FOREIGN KEY (TABLEID) 
 REFERENCES TABLES1 (TABLEID));

ALTER TABLE MENUITEMS ADD (
  FOREIGN KEY (MENUID) 
 REFERENCES MENUS (MENUID));
 
ALTER TABLE INGREDIENTS ADD (
  FOREIGN KEY (FURNISORID)
 REFERENCES FURNISORS (FURNISORID));





INSERT INTO EMPLOYEE_ROLE ( EMPLOYEEROLECODE, ROLE_DESCRIPTION ) VALUES ( 1, 'BARMAN'); 
INSERT INTO EMPLOYEE_ROLE ( EMPLOYEEROLECODE, ROLE_DESCRIPTION ) VALUES ( 2, 'OSPATAR'); 
INSERT INTO EMPLOYEE_ROLE ( EMPLOYEEROLECODE, ROLE_DESCRIPTION ) VALUES ( 3, 'BUCATAR'); 
INSERT INTO EMPLOYEE_ROLE ( EMPLOYEEROLECODE, ROLE_DESCRIPTION ) VALUES ( 4, 'BUCATAR-CHEF'); 
INSERT INTO EMPLOYEE_ROLE ( EMPLOYEEROLECODE, ROLE_DESCRIPTION ) VALUES ( 5, 'OSPATAR-PRINCIPAL'); 


INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 1111, 'IONESCU', 'MARIAN', 1, NULL, 2500); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 2222, 'POPA', 'IOANA', 2, NULL, 3500); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 3333, 'RUSU', 'ANDREI', 3, NULL, 4500); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 4444, 'ENACHE', 'MARIA', 4, NULL, 2000); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 5555, 'ELIADE', 'ANDREEA', 5, NULL, 1500); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 6666, 'COZMA', 'GEORGE', 5, NULL, 4500); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 7777, 'NECHIFOR', 'GEANINA', 1, NULL, 5000); 
INSERT INTO EMPLOYEES ( EMPLOYEEID, EMPLOYEELAST, EMPLOYEEFIRST, EMPLOYEEROLECODE, DOB,
SALARY ) VALUES ( 8888, 'CONDREA', 'CARMEN', 2, NULL, 1000); 


INSERT INTO TABLES1 ( TABLEID, TABLE_SEATS ) VALUES ( 1, 4); 
INSERT INTO TABLES1 ( TABLEID, TABLE_SEATS ) VALUES ( 2, 6); 
INSERT INTO TABLES1 ( TABLEID, TABLE_SEATS ) VALUES ( 3, 8); 
INSERT INTO TABLES1 ( TABLEID, TABLE_SEATS ) VALUES ( 4, 10); 
INSERT INTO TABLES1 ( TABLEID, TABLE_SEATS ) VALUES ( 5, 2); 

INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (1, 'card', 30); 
INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (2, 'card', 45); 
INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (3, 'card', 100); 
INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (4, 'cash', 155); 
INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (5, 'cash', 120); 
INSERT INTO PAYMENT ( PAYMENTID, PAYMENTTYPE, SUMPAYMENT ) VALUES (6, 'cash', 320); 

INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (11, 'MARIA', 'POPESCU', 0745625789, 'popescum@gmail.com' ); 
INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (22, 'ALINA', 'POPA', 0756694123, 'popaalina@gmail.com'); 
INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (33, 'ECATERINA', 'STANCU', 0745231324, 'stancuecaterina@gmail.com'); 
INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (44, 'MIHAI', 'LUNGU', 0745896354, 'lungumihai@gmail.com'); 
INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (55, 'SORIN', 'CRISTEA', 0744523179, 'cristeasorin@gmail.com'); 
INSERT INTO CLIENTS ( CLIENTID, CLIENTFIRSTNAME, CLIENTLASTNAME, PHONE,
EMAIL ) VALUES (66, 'DORIN', 'PATRASCU', 0744456179, 'dorin123@gmail.com'); 

INSERT INTO BOOKING ( BOOKINGID, CLIENTID,
DATE_B ) VALUES ( 10, 11,  TO_Date( '05/20/2019 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 
INSERT INTO BOOKING ( BOOKINGID,  CLIENTID,
DATE_B ) VALUES ( 20, 22,  TO_Date( '05/19/2019 10:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 
INSERT INTO BOOKING ( BOOKINGID,  CLIENTID,
DATE_B ) VALUES ( 30, 33,  TO_Date( '05/19/2020 10:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 
INSERT INTO BOOKING ( BOOKINGID,  CLIENTID,
DATE_B ) VALUES ( 40, 44,  TO_Date( '05/21/2021 11:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 
INSERT INTO BOOKING ( BOOKINGID, CLIENTID,
DATE_B ) VALUES ( 50, 55,  TO_Date( '05/22/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 

INSERT INTO FURNISORS ( FURNISORID, NAME_FURNISOR, PHONE, ADDRESS ) VALUES ( 
111, 'CLEOPATRA SRL', 335301236, 'VASLUI'); 
INSERT INTO FURNISORS ( FURNISORID, NAME_FURNISOR, PHONE, ADDRESS ) VALUES ( 
222, 'NASTAC SRL', 335445278, 'IASI'); 
INSERT INTO FURNISORS ( FURNISORID, NAME_FURNISOR, PHONE, ADDRESS ) VALUES ( 
333, 'PALOMA SRL', 579632459, 'HUSI'); 
INSERT INTO FURNISORS ( FURNISORID, NAME_FURNISOR, PHONE, ADDRESS ) VALUES ( 
444, 'PRAJITURELA SRL', 478967891, 'IASI'); 
INSERT INTO FURNISORS ( FURNISORID, NAME_FURNISOR, PHONE, ADDRESS ) VALUES ( 
555, 'CANTEMIR SRL', 789123456, 'BARLAD'); 

INSERT INTO MENUS ( MENUID, MENU_NAME, NUMBER_OF_PAGES ) VALUES ( 1, 'BAUTURI', 10); 
INSERT INTO MENUS ( MENUID, MENU_NAME, NUMBER_OF_PAGES ) VALUES ( 2, 'SALATE', 3); 
INSERT INTO MENUS ( MENUID, MENU_NAME, NUMBER_OF_PAGES ) VALUES ( 3, 'PASTE', 2); 
INSERT INTO MENUS ( MENUID, MENU_NAME, NUMBER_OF_PAGES ) VALUES ( 4, 'PIZZA', 3); 
INSERT INTO MENUS ( MENUID, MENU_NAME, NUMBER_OF_PAGES ) VALUES ( 5, 'VEGAN', 5); 

INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (1, 'SALATA DE TON', 15, 2); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (2, 'SALATA CU PUI', 25, 2); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (3, 'CAPUCCINO', 10, 1); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (4, 'PIZZA MARGHERITA', 25, 4); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (5, 'PIZZA CU TON', 22, 4); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (6, 'PIZZA CAPRICIOSA', 23, 4); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (7, 'PASTE CARBONARA', 35, 3); 
INSERT INTO MENUITEMS ( MENUITEMID, ITEM_DESCRIPTION, PRICE, MENUID ) VALUES (8, 'LEGUME LA GRATAR', 45, 5); 

INSERT INTO INGREDIENTS ( INGREDIENTID, QUANTITY, NAME, FURNISORID ) VALUES ( 1, 2, 'PESTE', 111); 
INSERT INTO INGREDIENTS ( INGREDIENTID, QUANTITY, NAME, FURNISORID ) VALUES ( 2, 1, 'SALATA', 222); 
INSERT INTO INGREDIENTS ( INGREDIENTID, QUANTITY, NAME, FURNISORID ) VALUES ( 3, 2, 'CEAPA', 333); 
INSERT INTO INGREDIENTS ( INGREDIENTID, QUANTITY, NAME, FURNISORID ) VALUES ( 4, 1, 'FAINA', 444); 
INSERT INTO INGREDIENTS ( INGREDIENTID, QUANTITY, NAME, FURNISORID ) VALUES ( 5, 1, 'MOZZARELA', 555); 

INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (1,1);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (1,2);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (2,3);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (2,4);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (3,5);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (4,1);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (4,2);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (5,3);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (6,4);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (7,5);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (8,1);
INSERT INTO CONTAIN ( MENUITEMID, INGREDIENTID) VALUES (8,2);


INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (10, 2222, 11, 1, 1,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 

INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (20, 2222, 22, 2, 2,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 

INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (30, 5555, 33, 3, 1,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM'));

INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (40, 5555, 44, 4, 2,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 

INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (50, 5555, 55, 5, 3,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 

INSERT INTO ORDERS ( ORDERID, EMPLOYEEID, CLIENTID, PAYMENTID, TABLEID,
ORDER_DATE_TIME ) VALUES (60, 6666, 66, 6, 4,  TO_Date( '05/20/2021 12:00:00 AM', 'MM/DD/YYYY HH:MI:SS AM')); 


INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (1, 10);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (2, 10);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (3, 10);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (4, 20);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (5, 30);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (6, 30);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (1, 40);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (3, 40);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (5, 40);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (7, 50);
INSERT INTO INCLUDE1 ( MENUITEMID, ORDERID) VALUES (8, 50);


COMMIT;


-- cerinte
-- 11
-- 1) Sa se afiseze informatii despre angajatii al caror salariu depaseste valoare medie
-- a salariilor colegilor sai care ocupa acelasi post.
SELECT employeelast as "Nume", employeefirst as "Prenume", salary as "Salariu", employeerolecode as "Cod job",
(select role_description
from employee_role
where employeerolecode = e.employeerolecode) post_ocupat,
(select avg(salary)
from employees
where employeerolecode = e.employeerolecode) salariu_mediu,
(select count(*)
from employees
where employeerolecode = e.employeerolecode) nr_angajati_acelasi_job,
( select count(*)
  from orders
  where employeeid = e.employeeid) mese_servite
FROM employees e
WHERE salary > ( select avg(salary) 
                 from employees
                 where employeerolecode = e.employeerolecode)
ORDER BY(salary);


-- 2) Să se afișeze numele, salariul și postul ocupat de anjatul cu codul '2222' (ospătar) și în plus
-- codul comenzii cu val maximă de plătit, tipul de plată al comenzii respective și masa comenzii respective. 
with smax as ( select max(p1.sumpayment) 
               from payment p1
               join orders o1 on (o1.employeeid = 2222 and o1.paymentid = p1.paymentid) )
select initcap(e.employeelast) as "Nume", initcap(e.employeefirst) as "Prenume", e.salary as "Salariu", er.role_description as "Denumire job", o1.orderid as "Nr. comandă", upper(p1.paymenttype) as "Tip plată", t1.tableid as "Nr. masă"
from employees e
join employee_role er on (e.employeerolecode = er.employeerolecode)
join orders o1 on (e.employeeid = o1.employeeid)
join payment p1 on (p1.paymentid = o1.paymentid)
join tables1 t1 on (t1.tableid = o1.tableid)
where e.employeeid=2222 and p1.sumpayment = (select * from smax);


-- 3) Să se afișeze numărul total de rezervări (un mesaj dacă nu au fost făcute rezervari) și, din acest total, numărul celor care au fost făcute în
-- 2019, 2020 și în anul curent. Denumirea capetelor de tabel se va face corespunzător.
select nvl(to_char(count(bookingid)), 'Nu au fost facute rezervari.') as "Rezervari",
count (case when  to_char(date_b, 'YYYY') = '2019'  then 1 else NULL end)  as "2019",
count(decode(to_char(date_b, 'YYYY'), 2020, bookingid)) as "2020",
count(decode(to_char(sysdate,'yyyy'), 2021, bookingid)) as "2021"
from booking, dual;


-- 4) Să se afișeze numele și prenumele angajaților care s-au ocupat de cele mai multe comenzi
-- ( în plus, vor fi afișați doar cu condiția că au preluat cel puțin o comandă).
select e.employeelast, e.employeefirst
from employees e
where ( select count(o.employeeid)
        from orders o
        where o.employeeid = e.employeeid) = ( select max(count(o1.employeeid))
                                               from orders o1
                                               group by o1.employeeid having count(*) > 1)
order by 1, 2;


--5) Să se afișeze numele și prenumele (împreună pe aceeași coloană) angajaților care au servit la o masă unde clientul făcuse rezervare.
select e.employeelast, e.employeefirst
from employees e
where e.employeeid in ( select o.employeeid
                        from orders o
                        where clientid in ( select c.clientid
                                            from clients c
                                            where c.clientid in ( select b.clientid
                                                                  from booking b ) ) );



-- 12
-- UPDATE - Să se dubleze prețul produselor care au fost comandate minim o dată.
SELECT * from menuitems;

update menuitems set price = price*2
where menuitemid in ( select i.menuitemid 
                      from include1 i);

SELECT * from menuitems;

-- DELETE - Să se șteargă angajații care sunt ospătari și nu au servit la nicio comandă. (Ospătarii au codul jobului = 2)
SELECT * from employees;

delete from employees
where employeerolecode = 2 
and 
      employeeid not in (select employeeid from orders);

SELECT * from employees;


-- UPDATE - Să se mărească salariul tuturor barmanilor de 1.3 ori.
SELECT * from employees;

update employees set salary = salary * 1.3
where employeerolecode in ( select employeerolecode from employee_role 
                            where upper(role_description) = 'BARMAN'); 

SELECT * from employees;



--13
CREATE SEQUENCE insert_secv
start with 1
increment by 1
minvalue 0
maxvalue 5000
nocycle;